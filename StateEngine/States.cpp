//
// Statemachine code from reading SCXML file 'States.scxml'
// Created by: The Qt SCXML Compiler version 2 (Qt 6.8.0)
// WARNING! All changes made in this file will be lost!
//

#include "States.h"

#include <qscxmlinvokableservice.h>
#include <qscxmltabledata.h>
#include <QtCore/qtmochelpers.h>
#include <QScxmlNullDataModel>

#if !defined(Q_QSCXMLC_OUTPUT_REVISION)
#error "The header file 'States.scxml' doesn't include <qscxmltabledata.h>."
#elif Q_QSCXMLC_OUTPUT_REVISION != 2
#error "This file was generated using the qscxmlc from 6.8.0. It"
#error "cannot be used with the include files from this version of Qt."
#error "(The qscxmlc has changed too much.)"
#endif

struct PieMenuState::Data: private QScxmlTableData {
    Data(PieMenuState &stateMachine)
        : stateMachine(stateMachine)
    {}

    void init() {
        stateMachine.setTableData(this);
        stateMachine.setDataModel(&dataModel);
    }

    QString name() const override final
    { return string(0); }

    QScxmlExecutableContent::ContainerId initialSetup() const override final
    { return 71; }

    QScxmlExecutableContent::InstructionId *instructions() const override final
    { return theInstructions; }

    QScxmlExecutableContent::StringId *dataNames(int *count) const override final
    { *count = 8; return dataIds; }

    QScxmlExecutableContent::EvaluatorInfo evaluatorInfo(QScxmlExecutableContent::EvaluatorId evaluatorId) const override final
    { Q_ASSERT(evaluatorId >= 0); Q_ASSERT(evaluatorId < 5); return evaluators[evaluatorId]; }

    QScxmlExecutableContent::AssignmentInfo assignmentInfo(QScxmlExecutableContent::EvaluatorId assignmentId) const override final
    { Q_ASSERT(assignmentId >= 0); Q_ASSERT(assignmentId < 17); return assignments[assignmentId]; }

    QScxmlExecutableContent::ForeachInfo foreachInfo(QScxmlExecutableContent::EvaluatorId foreachId) const override final
    { Q_ASSERT(foreachId >= 0); Q_ASSERT(foreachId < 0); return foreaches[foreachId]; }

    QString string(QScxmlExecutableContent::StringId id) const override final
    {
        Q_ASSERT(id >= QScxmlExecutableContent::NoString); Q_ASSERT(id < 71);
        if (id == QScxmlExecutableContent::NoString) return QString();
        const auto dataOffset = strings.offsetsAndSize[id * 2];
        const auto dataSize = strings.offsetsAndSize[id * 2 + 1];
        return QString::fromRawData(reinterpret_cast<const QChar*>(&strings.stringdata[dataOffset]), dataSize);
    }

    const qint32 *stateMachineTable() const override final
    { return theStateMachineTable; }

    QScxmlInvokableServiceFactory *serviceFactory(int id) const override final;

    PieMenuState &stateMachine;
    QScxmlNullDataModel dataModel;

    static QScxmlExecutableContent::ParameterInfo param(QScxmlExecutableContent::StringId name,
                                                        QScxmlExecutableContent::EvaluatorId expr,
                                                        QScxmlExecutableContent::StringId location)
    {
        QScxmlExecutableContent::ParameterInfo p;
        p.name = name;
        p.expr = expr;
        p.location = location;
        return p;
    }

    static QScxmlExecutableContent::InvokeInfo invoke(
            QScxmlExecutableContent::StringId id,
            QScxmlExecutableContent::StringId prefix,
            QScxmlExecutableContent::EvaluatorId expr,
            QScxmlExecutableContent::StringId location,
            QScxmlExecutableContent::StringId context,
            QScxmlExecutableContent::ContainerId finalize,
            bool autoforward)
    {
        QScxmlExecutableContent::InvokeInfo i;
        i.id = id;
        i.prefix = prefix;
        i.expr = expr;
        i.location = location;
        i.context = context;
        i.finalize = finalize;
        i.autoforward = autoforward;
        return i;
    }

    static qint32 theInstructions[];
    static QScxmlExecutableContent::StringId dataIds[];
    static QScxmlExecutableContent::EvaluatorInfo evaluators[];
    static QScxmlExecutableContent::AssignmentInfo assignments[];
    static QScxmlExecutableContent::ForeachInfo foreaches[];
    static const qint32 theStateMachineTable[];
    static struct Strings {
        const uint offsetsAndSize[71 * 2];
        char16_t stringdata[1941];
    } strings;
};

PieMenuState::PieMenuState(QObject *parent)
    : QScxmlStateMachine(&staticMetaObject, parent)
    , data(new Data(*this))
{ qRegisterMetaType<PieMenuState *>(); data->init(); }

PieMenuState::~PieMenuState()
{ delete data; }

QScxmlInvokableServiceFactory *PieMenuState::Data::serviceFactory(int id) const
{
    Q_UNUSED(id);
    Q_UNREACHABLE();
}

qint32 PieMenuState::Data::theInstructions[] = {
1, 4, 7, 0, 7, 1, 1, 14, 7, 2, 7, 3, 7, 4, 4, 20, 4, 21, 4, 22, 4, 23, 1, 2, 7,
5, 2, 1, 4, 1, 2, 7, 6, 1, 9, 7, 7, 4, 23, 4, 21, 11, 51, -1, 1, 16, 3, 54, 51,
-1, -1, -1, -1, -1, -1, -1, 55, -1, -1, -1, 0, 0, 1, 2, 7, 8, 1, 3, 11, 51, -1,
1, 16, 8, 9, 8, 10, 8, 11, 8, 12, 8, 13, 8, 14, 8, 15, 8, 16
};

QScxmlExecutableContent::StringId PieMenuState::Data::dataIds[] = {
11, 14, 17, 2, 5, 41, 48, 68
};

QScxmlExecutableContent::EvaluatorInfo PieMenuState::Data::evaluators[] = {
{ 9, 10 }, { 30, 31 }, { 33, 34 }, { 35, 36 }, { 43, 44 }
};

QScxmlExecutableContent::AssignmentInfo PieMenuState::Data::assignments[] = {
{ 2, 3, 4 }, { 5, 6, 7 }, { 11, 12, 13 }, { 14, 15, 16 }, { 17, 18, 19 },
{ 37, 38, 39 }, { 41, 17, 42 }, { 48, 49, 50 }, { 48, 57, 58 }, { 11, 59, 60 },
{ 14, 59, 60 }, { 17, 61, 62 }, { 2, 63, 64 }, { 5, 65, 66 }, { 41, 61, 62 },
{ 48, 57, 67 }, { 68, 69, 70 }
};

QScxmlExecutableContent::ForeachInfo PieMenuState::Data::foreaches[] = {
{ -1, -1, -1, -1 }
};

PieMenuState::Data::Strings PieMenuState::Data::strings = {{
0, 12, 13, 4, 18, 5, 24, 17, 42, 79, 122, 2, 125, 14, 140, 76, 217, 9, 227, 7,
235, 56, 292, 2, 295, 14, 310, 76, 387, 2, 390, 14, 405, 76, 482, 2, 485, 14,
500, 76, 577, 13, 591, 11, 603, 11, 615, 9, 625, 9, 635, 9, 645, 9, 655, 6,
662, 9, 672, 5, 678, 55, 734, 105, 840, 7, 848, 35, 884, 87, 972, 25, 998, 77,
1076, 6, 1083, 16, 1100, 81, 1182, 8, 1191, 5, 1197, 51, 1249, 18, 1268, 71,
1340, 7, 1348, 16, 1365, 8, 1374, 6, 1381, 4, 1386, 70, 1457, 13, 1471, 8,
1480, 6, 1487, 49, 1537, 2, 1540, 14, 1555, 5, 1561, 69, 1631, 1, 1633, 46,
1680, 2, 1683, 47, 1731, 1, 1733, 46, 1780, 2, 1783, 47, 1831, 50, 1882, 2,
1885, 4, 1890, 49
},{
0x50,0x69,0x65,0x4d,0x65,0x6e,0x75,0x53,0x74,0x61,0x74,0x65,0, // 0: PieMenuState
0x52,0x6f,0x6f,0x74,0, // 1: Root
0x6d,0x69,0x6e,0x44,0x6d,0, // 2: minDm
0x5f,0x65,0x76,0x65,0x6e,0x74,0x2e,0x64,0x61,0x74,0x61,0x2e,0x6d,0x69,0x6e,0x44,0x6d,0, // 3: _event.data.minDm
0x61,0x73,0x73,0x69,0x67,0x6e,0x20,0x69,0x6e,0x73,0x74,0x72,0x75,0x63,0x74,0x69,0x6f,0x6e,0x20,0x69,0x6e,0x20,0x74,0x72,0x61,0x6e,0x73,0x69,0x74,0x69,0x6f,0x6e,0x20,0x20,0x6f,0x66,0x20,0x73,0x74,0x61,0x74,0x65,0x20,0x27,0x52,0x6f,0x6f,0x74,0x27,0x20,0x77,0x69,0x74,0x68,0x20,0x65,0x78,0x70,0x72,0x3d,0x22,0x5f,0x65,0x76,0x65,0x6e,0x74,0x2e,0x64,0x61,0x74,0x61,0x2e,0x6d,0x69,0x6e,0x44,0x6d,0x22,0, // 4: assign instruction in transition  of state 'Root' with expr=\"_event.data.minDm\"
0x72,0x30,0, // 5: r0
0x5f,0x65,0x76,0x65,0x6e,0x74,0x2e,0x64,0x61,0x74,0x61,0x2e,0x72,0x30,0, // 6: _event.data.r0
0x61,0x73,0x73,0x69,0x67,0x6e,0x20,0x69,0x6e,0x73,0x74,0x72,0x75,0x63,0x74,0x69,0x6f,0x6e,0x20,0x69,0x6e,0x20,0x74,0x72,0x61,0x6e,0x73,0x69,0x74,0x69,0x6f,0x6e,0x20,0x20,0x6f,0x66,0x20,0x73,0x74,0x61,0x74,0x65,0x20,0x27,0x52,0x6f,0x6f,0x74,0x27,0x20,0x77,0x69,0x74,0x68,0x20,0x65,0x78,0x70,0x72,0x3d,0x22,0x5f,0x65,0x76,0x65,0x6e,0x74,0x2e,0x64,0x61,0x74,0x61,0x2e,0x72,0x30,0x22,0, // 7: assign instruction in transition  of state 'Root' with expr=\"_event.data.r0\"
0x69,0x6e,0x69,0x74,0x45,0x76,0x65,0x6e,0x74,0, // 8: initEvent
0x21,0x6b,0x65,0x79,0x4f,0x76,0x72,0, // 9: !keyOvr
0x74,0x72,0x61,0x6e,0x73,0x69,0x74,0x69,0x6f,0x6e,0x20,0x69,0x6e,0x73,0x74,0x72,0x75,0x63,0x74,0x69,0x6f,0x6e,0x20,0x69,0x6e,0x20,0x73,0x74,0x61,0x74,0x65,0x20,0x52,0x6f,0x6f,0x74,0x20,0x77,0x69,0x74,0x68,0x20,0x63,0x6f,0x6e,0x64,0x3d,0x22,0x21,0x6b,0x65,0x79,0x4f,0x76,0x72,0x22,0, // 10: transition instruction in state Root with cond=\"!keyOvr\"
0x64,0x4d,0, // 11: dM
0x5f,0x65,0x76,0x65,0x6e,0x74,0x2e,0x64,0x61,0x74,0x61,0x2e,0x64,0x4d,0, // 12: _event.data.dM
0x61,0x73,0x73,0x69,0x67,0x6e,0x20,0x69,0x6e,0x73,0x74,0x72,0x75,0x63,0x74,0x69,0x6f,0x6e,0x20,0x69,0x6e,0x20,0x74,0x72,0x61,0x6e,0x73,0x69,0x74,0x69,0x6f,0x6e,0x20,0x20,0x6f,0x66,0x20,0x73,0x74,0x61,0x74,0x65,0x20,0x27,0x52,0x6f,0x6f,0x74,0x27,0x20,0x77,0x69,0x74,0x68,0x20,0x65,0x78,0x70,0x72,0x3d,0x22,0x5f,0x65,0x76,0x65,0x6e,0x74,0x2e,0x64,0x61,0x74,0x61,0x2e,0x64,0x4d,0x22,0, // 13: assign instruction in transition  of state 'Root' with expr=\"_event.data.dM\"
0x64,0x49,0, // 14: dI
0x5f,0x65,0x76,0x65,0x6e,0x74,0x2e,0x64,0x61,0x74,0x61,0x2e,0x64,0x49,0, // 15: _event.data.dI
0x61,0x73,0x73,0x69,0x67,0x6e,0x20,0x69,0x6e,0x73,0x74,0x72,0x75,0x63,0x74,0x69,0x6f,0x6e,0x20,0x69,0x6e,0x20,0x74,0x72,0x61,0x6e,0x73,0x69,0x74,0x69,0x6f,0x6e,0x20,0x20,0x6f,0x66,0x20,0x73,0x74,0x61,0x74,0x65,0x20,0x27,0x52,0x6f,0x6f,0x74,0x27,0x20,0x77,0x69,0x74,0x68,0x20,0x65,0x78,0x70,0x72,0x3d,0x22,0x5f,0x65,0x76,0x65,0x6e,0x74,0x2e,0x64,0x61,0x74,0x61,0x2e,0x64,0x49,0x22,0, // 16: assign instruction in transition  of state 'Root' with expr=\"_event.data.dI\"
0x69,0x64,0, // 17: id
0x5f,0x65,0x76,0x65,0x6e,0x74,0x2e,0x64,0x61,0x74,0x61,0x2e,0x69,0x64,0, // 18: _event.data.id
0x61,0x73,0x73,0x69,0x67,0x6e,0x20,0x69,0x6e,0x73,0x74,0x72,0x75,0x63,0x74,0x69,0x6f,0x6e,0x20,0x69,0x6e,0x20,0x74,0x72,0x61,0x6e,0x73,0x69,0x74,0x69,0x6f,0x6e,0x20,0x20,0x6f,0x66,0x20,0x73,0x74,0x61,0x74,0x65,0x20,0x27,0x52,0x6f,0x6f,0x74,0x27,0x20,0x77,0x69,0x74,0x68,0x20,0x65,0x78,0x70,0x72,0x3d,0x22,0x5f,0x65,0x76,0x65,0x6e,0x74,0x2e,0x64,0x61,0x74,0x61,0x2e,0x69,0x64,0x22,0, // 19: assign instruction in transition  of state 'Root' with expr=\"_event.data.id\"
0x73,0x74,0x61,0x72,0x74,0x5f,0x63,0x6c,0x6f,0x73,0x65,0x42,0x79,0, // 20: start_closeBy
0x65,0x6e,0x64,0x5f,0x63,0x6c,0x6f,0x73,0x65,0x42,0x79,0, // 21: end_closeBy
0x73,0x74,0x61,0x72,0x74,0x5f,0x68,0x6f,0x76,0x65,0x72,0, // 22: start_hover
0x65,0x6e,0x64,0x5f,0x68,0x6f,0x76,0x65,0x72,0, // 23: end_hover
0x6d,0x6f,0x75,0x73,0x65,0x4d,0x6f,0x76,0x65,0, // 24: mouseMove
0x4d,0x61,0x69,0x6e,0x53,0x74,0x61,0x74,0x65,0, // 25: MainState
0x68,0x69,0x64,0x65,0x45,0x76,0x65,0x6e,0x74,0, // 26: hideEvent
0x68,0x69,0x64,0x64,0x65,0x6e,0, // 27: hidden
0x73,0x68,0x6f,0x77,0x45,0x76,0x65,0x6e,0x74,0, // 28: showEvent
0x73,0x74,0x69,0x6c,0x6c,0, // 29: still
0x6e,0x6f,0x74,0x28,0x6b,0x65,0x79,0x4f,0x76,0x72,0x29,0x20,0x61,0x6e,0x64,0x20,0x28,0x64,0x4d,0x20,0x3e,0x20,0x6d,0x69,0x6e,0x44,0x6d,0x29,0x20,0x61,0x6e,0x64,0x20,0x28,0x64,0x49,0x20,0x3e,0x20,0x30,0x29,0x20,0x61,0x6e,0x64,0x20,0x28,0x64,0x49,0x20,0x3c,0x20,0x72,0x32,0x29,0, // 30: not(keyOvr) and (dM > minDm) and (dI > 0) and (dI < r2)
0x74,0x72,0x61,0x6e,0x73,0x69,0x74,0x69,0x6f,0x6e,0x20,0x69,0x6e,0x73,0x74,0x72,0x75,0x63,0x74,0x69,0x6f,0x6e,0x20,0x69,0x6e,0x20,0x73,0x74,0x61,0x74,0x65,0x20,0x73,0x74,0x69,0x6c,0x6c,0x20,0x77,0x69,0x74,0x68,0x20,0x63,0x6f,0x6e,0x64,0x3d,0x22,0x6e,0x6f,0x74,0x28,0x6b,0x65,0x79,0x4f,0x76,0x72,0x29,0x20,0x61,0x6e,0x64,0x20,0x28,0x64,0x4d,0x20,0x3e,0x20,0x6d,0x69,0x6e,0x44,0x6d,0x29,0x20,0x61,0x6e,0x64,0x20,0x28,0x64,0x49,0x20,0x3e,0x20,0x30,0x29,0x20,0x61,0x6e,0x64,0x20,0x28,0x64,0x49,0x20,0x3c,0x20,0x72,0x32,0x29,0x22,0, // 31: transition instruction in state still with cond=\"not(keyOvr) and (dM > minDm) and (dI > 0) and (dI < r2)\"
0x63,0x6c,0x6f,0x73,0x65,0x42,0x79,0, // 32: closeBy
0x6b,0x65,0x79,0x4f,0x76,0x72,0x20,0x6f,0x72,0x20,0x28,0x64,0x4d,0x20,0x3c,0x20,0x6d,0x69,0x6e,0x44,0x6d,0x29,0x20,0x6f,0x72,0x20,0x28,0x64,0x49,0x20,0x3e,0x20,0x72,0x32,0x29,0, // 33: keyOvr or (dM < minDm) or (dI > r2)
0x74,0x72,0x61,0x6e,0x73,0x69,0x74,0x69,0x6f,0x6e,0x20,0x69,0x6e,0x73,0x74,0x72,0x75,0x63,0x74,0x69,0x6f,0x6e,0x20,0x69,0x6e,0x20,0x73,0x74,0x61,0x74,0x65,0x20,0x63,0x6c,0x6f,0x73,0x65,0x42,0x79,0x20,0x77,0x69,0x74,0x68,0x20,0x63,0x6f,0x6e,0x64,0x3d,0x22,0x6b,0x65,0x79,0x4f,0x76,0x72,0x20,0x6f,0x72,0x20,0x28,0x64,0x4d,0x20,0x3c,0x20,0x6d,0x69,0x6e,0x44,0x6d,0x29,0x20,0x6f,0x72,0x20,0x28,0x64,0x49,0x20,0x3e,0x20,0x72,0x32,0x29,0x22,0, // 34: transition instruction in state closeBy with cond=\"keyOvr or (dM < minDm) or (dI > r2)\"
0x6e,0x6f,0x74,0x28,0x6b,0x65,0x79,0x4f,0x76,0x72,0x29,0x20,0x61,0x6e,0x64,0x20,0x28,0x64,0x49,0x20,0x3c,0x3d,0x20,0x30,0x29,0, // 35: not(keyOvr) and (dI <= 0)
0x74,0x72,0x61,0x6e,0x73,0x69,0x74,0x69,0x6f,0x6e,0x20,0x69,0x6e,0x73,0x74,0x72,0x75,0x63,0x74,0x69,0x6f,0x6e,0x20,0x69,0x6e,0x20,0x73,0x74,0x61,0x74,0x65,0x20,0x63,0x6c,0x6f,0x73,0x65,0x42,0x79,0x20,0x77,0x69,0x74,0x68,0x20,0x63,0x6f,0x6e,0x64,0x3d,0x22,0x6e,0x6f,0x74,0x28,0x6b,0x65,0x79,0x4f,0x76,0x72,0x29,0x20,0x61,0x6e,0x64,0x20,0x28,0x64,0x49,0x20,0x3c,0x3d,0x20,0x30,0x29,0x22,0, // 36: transition instruction in state closeBy with cond=\"not(keyOvr) and (dI <= 0)\"
0x68,0x61,0x73,0x53,0x75,0x62,0, // 37: hasSub
0x68,0x61,0x73,0x53,0x75,0x62,0x6d,0x65,0x6e,0x75,0x28,0x20,0x69,0x64,0x20,0x29,0, // 38: hasSubmenu( id )
0x61,0x73,0x73,0x69,0x67,0x6e,0x20,0x69,0x6e,0x73,0x74,0x72,0x75,0x63,0x74,0x69,0x6f,0x6e,0x20,0x69,0x6e,0x20,0x74,0x72,0x61,0x6e,0x73,0x69,0x74,0x69,0x6f,0x6e,0x20,0x20,0x6f,0x66,0x20,0x73,0x74,0x61,0x74,0x65,0x20,0x27,0x63,0x6c,0x6f,0x73,0x65,0x42,0x79,0x27,0x20,0x77,0x69,0x74,0x68,0x20,0x65,0x78,0x70,0x72,0x3d,0x22,0x68,0x61,0x73,0x53,0x75,0x62,0x6d,0x65,0x6e,0x75,0x28,0x20,0x69,0x64,0x20,0x29,0x22,0, // 39: assign instruction in transition  of state 'closeBy' with expr=\"hasSubmenu( id )\"
0x73,0x65,0x6c,0x65,0x63,0x74,0x65,0x64,0, // 40: selected
0x73,0x65,0x6c,0x49,0x64,0, // 41: selId
0x61,0x73,0x73,0x69,0x67,0x6e,0x20,0x69,0x6e,0x73,0x74,0x72,0x75,0x63,0x74,0x69,0x6f,0x6e,0x20,0x69,0x6e,0x20,0x73,0x74,0x61,0x74,0x65,0x20,0x73,0x65,0x6c,0x65,0x63,0x74,0x65,0x64,0x20,0x77,0x69,0x74,0x68,0x20,0x65,0x78,0x70,0x72,0x3d,0x22,0x69,0x64,0x22,0, // 42: assign instruction in state selected with expr=\"id\"
0x6b,0x65,0x79,0x4f,0x76,0x72,0x20,0x6f,0x72,0x20,0x28,0x64,0x49,0x20,0x3e,0x20,0x30,0x29,0, // 43: keyOvr or (dI > 0)
0x74,0x72,0x61,0x6e,0x73,0x69,0x74,0x69,0x6f,0x6e,0x20,0x69,0x6e,0x73,0x74,0x72,0x75,0x63,0x74,0x69,0x6f,0x6e,0x20,0x69,0x6e,0x20,0x73,0x74,0x61,0x74,0x65,0x20,0x73,0x65,0x6c,0x65,0x63,0x74,0x65,0x64,0x20,0x77,0x69,0x74,0x68,0x20,0x63,0x6f,0x6e,0x64,0x3d,0x22,0x6b,0x65,0x79,0x4f,0x76,0x72,0x20,0x6f,0x72,0x20,0x28,0x64,0x49,0x20,0x3e,0x20,0x30,0x29,0x22,0, // 44: transition instruction in state selected with cond=\"keyOvr or (dI > 0)\"
0x73,0x75,0x62,0x4d,0x65,0x6e,0x75,0, // 45: subMenu
0x4b,0x65,0x79,0x62,0x6f,0x61,0x72,0x64,0x4f,0x76,0x65,0x72,0x72,0x69,0x64,0x65,0, // 46: KeyboardOverride
0x49,0x6e,0x61,0x63,0x74,0x69,0x76,0x65,0, // 47: Inactive
0x6b,0x65,0x79,0x4f,0x76,0x72,0, // 48: keyOvr
0x74,0x72,0x75,0x65,0, // 49: true
0x61,0x73,0x73,0x69,0x67,0x6e,0x20,0x69,0x6e,0x73,0x74,0x72,0x75,0x63,0x74,0x69,0x6f,0x6e,0x20,0x69,0x6e,0x20,0x74,0x72,0x61,0x6e,0x73,0x69,0x74,0x69,0x6f,0x6e,0x20,0x20,0x6f,0x66,0x20,0x73,0x74,0x61,0x74,0x65,0x20,0x27,0x49,0x6e,0x61,0x63,0x74,0x69,0x76,0x65,0x27,0x20,0x77,0x69,0x74,0x68,0x20,0x65,0x78,0x70,0x72,0x3d,0x22,0x74,0x72,0x75,0x65,0x22,0, // 50: assign instruction in transition  of state 'Inactive' with expr=\"true\"
0x6b,0x65,0x79,0x4f,0x76,0x72,0x54,0x69,0x6d,0x65,0x6f,0x75,0x74,0, // 51: keyOvrTimeout
0x6b,0x65,0x79,0x50,0x72,0x65,0x73,0x73,0, // 52: keyPress
0x41,0x63,0x74,0x69,0x76,0x65,0, // 53: Active
0x73,0x65,0x6e,0x64,0x20,0x69,0x6e,0x73,0x74,0x72,0x75,0x63,0x74,0x69,0x6f,0x6e,0x20,0x69,0x6e,0x20,0x74,0x72,0x61,0x6e,0x73,0x69,0x74,0x69,0x6f,0x6e,0x20,0x20,0x6f,0x66,0x20,0x73,0x74,0x61,0x74,0x65,0x20,0x27,0x41,0x63,0x74,0x69,0x76,0x65,0x27,0, // 54: send instruction in transition  of state 'Active'
0x31,0x73,0, // 55: 1s
0x6e,0x61,0x76,0x4b,0x65,0x79,0x52,0x65,0x6c,0x65,0x61,0x73,0x65,0x64,0, // 56: navKeyReleased
0x66,0x61,0x6c,0x73,0x65,0, // 57: false
0x61,0x73,0x73,0x69,0x67,0x6e,0x20,0x69,0x6e,0x73,0x74,0x72,0x75,0x63,0x74,0x69,0x6f,0x6e,0x20,0x69,0x6e,0x20,0x74,0x72,0x61,0x6e,0x73,0x69,0x74,0x69,0x6f,0x6e,0x20,0x20,0x6f,0x66,0x20,0x73,0x74,0x61,0x74,0x65,0x20,0x27,0x41,0x63,0x74,0x69,0x76,0x65,0x27,0x20,0x77,0x69,0x74,0x68,0x20,0x65,0x78,0x70,0x72,0x3d,0x22,0x66,0x61,0x6c,0x73,0x65,0x22,0, // 58: assign instruction in transition  of state 'Active' with expr=\"false\"
0x30,0, // 59: 0
0x64,0x61,0x74,0x61,0x20,0x69,0x6e,0x73,0x74,0x72,0x75,0x63,0x74,0x69,0x6f,0x6e,0x20,0x69,0x6e,0x20,0x73,0x74,0x61,0x74,0x65,0x20,0x28,0x6e,0x6f,0x6e,0x65,0x29,0x20,0x77,0x69,0x74,0x68,0x20,0x65,0x78,0x70,0x72,0x3d,0x22,0x30,0x22,0, // 60: data instruction in state (none) with expr=\"0\"
0x2d,0x31,0, // 61: -1
0x64,0x61,0x74,0x61,0x20,0x69,0x6e,0x73,0x74,0x72,0x75,0x63,0x74,0x69,0x6f,0x6e,0x20,0x69,0x6e,0x20,0x73,0x74,0x61,0x74,0x65,0x20,0x28,0x6e,0x6f,0x6e,0x65,0x29,0x20,0x77,0x69,0x74,0x68,0x20,0x65,0x78,0x70,0x72,0x3d,0x22,0x2d,0x31,0x22,0, // 62: data instruction in state (none) with expr=\"-1\"
0x35,0, // 63: 5
0x64,0x61,0x74,0x61,0x20,0x69,0x6e,0x73,0x74,0x72,0x75,0x63,0x74,0x69,0x6f,0x6e,0x20,0x69,0x6e,0x20,0x73,0x74,0x61,0x74,0x65,0x20,0x28,0x6e,0x6f,0x6e,0x65,0x29,0x20,0x77,0x69,0x74,0x68,0x20,0x65,0x78,0x70,0x72,0x3d,0x22,0x35,0x22,0, // 64: data instruction in state (none) with expr=\"5\"
0x31,0x30,0, // 65: 10
0x64,0x61,0x74,0x61,0x20,0x69,0x6e,0x73,0x74,0x72,0x75,0x63,0x74,0x69,0x6f,0x6e,0x20,0x69,0x6e,0x20,0x73,0x74,0x61,0x74,0x65,0x20,0x28,0x6e,0x6f,0x6e,0x65,0x29,0x20,0x77,0x69,0x74,0x68,0x20,0x65,0x78,0x70,0x72,0x3d,0x22,0x31,0x30,0x22,0, // 66: data instruction in state (none) with expr=\"10\"
0x64,0x61,0x74,0x61,0x20,0x69,0x6e,0x73,0x74,0x72,0x75,0x63,0x74,0x69,0x6f,0x6e,0x20,0x69,0x6e,0x20,0x73,0x74,0x61,0x74,0x65,0x20,0x28,0x6e,0x6f,0x6e,0x65,0x29,0x20,0x77,0x69,0x74,0x68,0x20,0x65,0x78,0x70,0x72,0x3d,0x22,0x66,0x61,0x6c,0x73,0x65,0x22,0, // 67: data instruction in state (none) with expr=\"false\"
0x72,0x32,0, // 68: r2
0x32,0x2a,0x72,0x30,0, // 69: 2*r0
0x64,0x61,0x74,0x61,0x20,0x69,0x6e,0x73,0x74,0x72,0x75,0x63,0x74,0x69,0x6f,0x6e,0x20,0x69,0x6e,0x20,0x73,0x74,0x61,0x74,0x65,0x20,0x28,0x6e,0x6f,0x6e,0x65,0x29,0x20,0x77,0x69,0x74,0x68,0x20,0x65,0x78,0x70,0x72,0x3d,0x22,0x32,0x2a,0x72,0x30,0x22,0 // 70: data instruction in state (none) with expr=\"2*r0\"
}};

const qint32 PieMenuState::Data::theStateMachineTable[] = {
	0x2, // version
	0, // name
	0, // data-model
	83, // child states array offset
	12, // transition to initial states
	-1, // initial setup
	0, // binding
	-1, // maxServiceId
	14, 10, // state offset and count
	124, 16, // transition offset and count
	220, 87, // array offset and size

	// States:
	1, -1, 1, 13, -1, -1, -1, -1, 74, 77, -1,
	25, 0, 0, 14, -1, -1, -1, -1, 37, 43, -1,
	27, 1, 0, -1, -1, -1, -1, -1, -1, 12, -1,
	29, 1, 0, -1, -1, -1, -1, -1, -1, 18, -1,
	32, 1, 0, -1, -1, -1, -1, -1, -1, 28, -1,
	40, 1, 0, -1, -1, 26, -1, -1, -1, 35, -1,
	45, 1, 0, -1, -1, -1, -1, -1, -1, -1, -1,
	46, 0, 0, 15, -1, -1, -1, -1, 69, -1, -1,
	47, 7, 0, -1, -1, -1, -1, -1, -1, 51, -1,
	53, 7, 0, -1, -1, -1, -1, -1, -1, 65, -1,

	// Transitions:
	0, -1, 0, 0, -1, 0, 
	2, 0, 0, 0, -1, 6, 
	6, -1, 0, 1, 4, -1, 
	10, -1, 0, 2, 8, -1, 
	16, 1, 1, 3, 14, -1, 
	22, 2, 1, 4, 20, -1, 
	26, 3, 1, 4, 24, 22, 
	33, 4, 1, 5, 31, -1, 
	49, -1, 0, 8, 47, 33, 
	55, -1, 0, 9, 53, 44, 
	59, -1, 0, 9, 57, 62, 
	63, -1, 0, 9, 61, 66, 
	-1, -1, 2, -1, 85, -1, 
	-1, -1, 2, 0, 80, -1, 
	-1, -1, 2, 1, 45, -1, 
	-1, -1, 2, 7, 72, -1, 

	// Arrays:
	1, 8, 
	1, 24, 
	1, 2, 
	1, 26, 
	1, 3, 
	1, 28, 
	1, 3, 
	1, 4, 
	1, 20, 
	1, 4, 
	1, 3, 
	1, 21, 
	1, 5, 
	1, 22, 
	2, 5, 6, 
	1, 4, 
	1, 23, 
	1, 7, 
	5, 2, 3, 4, 5, 6, 
	1, 2, 
	1, 2, 
	1, 9, 
	1, 52, 
	1, 8, 
	1, 9, 
	1, 56, 
	1, 8, 
	1, 51, 
	1, 9, 
	1, 52, 
	3, 9, 10, 11, 
	2, 8, 9, 
	1, 8, 
	2, 1, 7, 
	2, 0, 1, 
	2, 1, 7, 
	1, 0, 
	1, 0, 

	0xc0ff33 // terminator
};

namespace {

#ifdef QT_MOC_HAS_STRINGDATA
struct qt_meta_stringdata_CLASSPieMenuStateENDCLASS_t {};
constexpr auto qt_meta_stringdata_CLASSPieMenuStateENDCLASS = QtMocHelpers::stringData(
    {char(0x50),char(0x69),char(0x65),char(0x4d),char(0x65),char(0x6e),char(0x75),char(0x53),char(0x74),char(0x61),char(0x74),char(0x65),char(0)}, // 0: PieMenuState,
    {char(0x52),char(0x6f),char(0x6f),char(0x74),char(0x43),char(0x68),char(0x61),char(0x6e),char(0x67),char(0x65),char(0x64),char(0)}, // 1: RootChanged,
    {char(0)}, // 2: ,
    {char(0x61),char(0x63),char(0x74),char(0x69),char(0x76),char(0x65),char(0)}, // 3: active,
    {char(0x4d),char(0x61),char(0x69),char(0x6e),char(0x53),char(0x74),char(0x61),char(0x74),char(0x65),char(0x43),char(0x68),char(0x61),char(0x6e),char(0x67),char(0x65),char(0x64),char(0)}, // 4: MainStateChanged,
    {char(0x68),char(0x69),char(0x64),char(0x64),char(0x65),char(0x6e),char(0x43),char(0x68),char(0x61),char(0x6e),char(0x67),char(0x65),char(0x64),char(0)}, // 5: hiddenChanged,
    {char(0x73),char(0x74),char(0x69),char(0x6c),char(0x6c),char(0x43),char(0x68),char(0x61),char(0x6e),char(0x67),char(0x65),char(0x64),char(0)}, // 6: stillChanged,
    {char(0x63),char(0x6c),char(0x6f),char(0x73),char(0x65),char(0x42),char(0x79),char(0x43),char(0x68),char(0x61),char(0x6e),char(0x67),char(0x65),char(0x64),char(0)}, // 7: closeByChanged,
    {char(0x73),char(0x65),char(0x6c),char(0x65),char(0x63),char(0x74),char(0x65),char(0x64),char(0x43),char(0x68),char(0x61),char(0x6e),char(0x67),char(0x65),char(0x64),char(0)}, // 8: selectedChanged,
    {char(0x73),char(0x75),char(0x62),char(0x4d),char(0x65),char(0x6e),char(0x75),char(0x43),char(0x68),char(0x61),char(0x6e),char(0x67),char(0x65),char(0x64),char(0)}, // 9: subMenuChanged,
    {char(0x4b),char(0x65),char(0x79),char(0x62),char(0x6f),char(0x61),char(0x72),char(0x64),char(0x4f),char(0x76),char(0x65),char(0x72),char(0x72),char(0x69),char(0x64),char(0x65),char(0x43),char(0x68),char(0x61),char(0x6e),char(0x67),char(0x65),char(0x64),char(0)}, // 10: KeyboardOverrideChanged,
    {char(0x49),char(0x6e),char(0x61),char(0x63),char(0x74),char(0x69),char(0x76),char(0x65),char(0x43),char(0x68),char(0x61),char(0x6e),char(0x67),char(0x65),char(0x64),char(0)}, // 11: InactiveChanged,
    {char(0x41),char(0x63),char(0x74),char(0x69),char(0x76),char(0x65),char(0x43),char(0x68),char(0x61),char(0x6e),char(0x67),char(0x65),char(0x64),char(0)}, // 12: ActiveChanged,
    {char(0x51),char(0x4f),char(0x62),char(0x6a),char(0x65),char(0x63),char(0x74),char(0x20),char(0x2a),char(0)}, // 13: QObject *,
    {char(0x70),char(0x61),char(0x72),char(0x65),char(0x6e),char(0x74),char(0)}, // 14: parent,
    {char(0x52),char(0x6f),char(0x6f),char(0x74),char(0)}, // 15: Root,
    {char(0x4d),char(0x61),char(0x69),char(0x6e),char(0x53),char(0x74),char(0x61),char(0x74),char(0x65),char(0)}, // 16: MainState,
    {char(0x68),char(0x69),char(0x64),char(0x64),char(0x65),char(0x6e),char(0)}, // 17: hidden,
    {char(0x73),char(0x74),char(0x69),char(0x6c),char(0x6c),char(0)}, // 18: still,
    {char(0x63),char(0x6c),char(0x6f),char(0x73),char(0x65),char(0x42),char(0x79),char(0)}, // 19: closeBy,
    {char(0x73),char(0x65),char(0x6c),char(0x65),char(0x63),char(0x74),char(0x65),char(0x64),char(0)}, // 20: selected,
    {char(0x73),char(0x75),char(0x62),char(0x4d),char(0x65),char(0x6e),char(0x75),char(0)}, // 21: subMenu,
    {char(0x4b),char(0x65),char(0x79),char(0x62),char(0x6f),char(0x61),char(0x72),char(0x64),char(0x4f),char(0x76),char(0x65),char(0x72),char(0x72),char(0x69),char(0x64),char(0x65),char(0)}, // 22: KeyboardOverride,
    {char(0x49),char(0x6e),char(0x61),char(0x63),char(0x74),char(0x69),char(0x76),char(0x65),char(0)}, // 23: Inactive,
    {char(0x41),char(0x63),char(0x74),char(0x69),char(0x76),char(0x65),char(0)} // 24: Active
);
#else  // !QT_MOC_HAS_STRINGDATA
#error "qtmochelpers.h not found or too old."
#endif // !QT_MOC_HAS_STRINGDATA
} // unnamed namespace

Q_CONSTINIT static const uint qt_meta_data_CLASSPieMenuStateENDCLASS[] = {

 // content:
      12,       // revision
       0,       // classname
       0,    0, // classinfo
      10,   14, // methods
      10,  107, // properties
       0,    0, // enums/sets
       1,  157, // constructors
       0,       // flags
      10,       // signalCount

 // signals: name, argc, parameters, tag, flags, initial metatype offsets
       1,    1,   74,    2, 0x06,   11 /* Public */,
       4,    1,   77,    2, 0x06,   13 /* Public */,
       5,    1,   80,    2, 0x06,   15 /* Public */,
       6,    1,   83,    2, 0x06,   17 /* Public */,
       7,    1,   86,    2, 0x06,   19 /* Public */,
       8,    1,   89,    2, 0x06,   21 /* Public */,
       9,    1,   92,    2, 0x06,   23 /* Public */,
      10,    1,   95,    2, 0x06,   25 /* Public */,
      11,    1,   98,    2, 0x06,   27 /* Public */,
      12,    1,  101,    2, 0x06,   29 /* Public */,

 // signals: parameters
    QMetaType::Void, QMetaType::Bool,    3,
    QMetaType::Void, QMetaType::Bool,    3,
    QMetaType::Void, QMetaType::Bool,    3,
    QMetaType::Void, QMetaType::Bool,    3,
    QMetaType::Void, QMetaType::Bool,    3,
    QMetaType::Void, QMetaType::Bool,    3,
    QMetaType::Void, QMetaType::Bool,    3,
    QMetaType::Void, QMetaType::Bool,    3,
    QMetaType::Void, QMetaType::Bool,    3,
    QMetaType::Void, QMetaType::Bool,    3,

 // constructors: parameters
    0x80000000 | 2, 0x80000000 | 13,   14,

 // properties: name, type, flags, notifyId, revision
      15, QMetaType::Bool, 0x00115001, uint(0), 0,
      16, QMetaType::Bool, 0x00115001, uint(1), 0,
      17, QMetaType::Bool, 0x00115001, uint(2), 0,
      18, QMetaType::Bool, 0x00115001, uint(3), 0,
      19, QMetaType::Bool, 0x00115001, uint(4), 0,
      20, QMetaType::Bool, 0x00115001, uint(5), 0,
      21, QMetaType::Bool, 0x00115001, uint(6), 0,
      22, QMetaType::Bool, 0x00115001, uint(7), 0,
      23, QMetaType::Bool, 0x00115001, uint(8), 0,
      24, QMetaType::Bool, 0x00115001, uint(9), 0,

 // constructors: name, argc, parameters, tag, flags, initial metatype offsets
       0,    1,  104,    2, 0x0e,   31 /* Public */,

       0        // eod
};

Q_CONSTINIT const QMetaObject PieMenuState::staticMetaObject = { {
    QMetaObject::SuperData::link<QScxmlStateMachine::staticMetaObject>(),
    qt_meta_stringdata_CLASSPieMenuStateENDCLASS.offsetsAndSizes,
    qt_meta_data_CLASSPieMenuStateENDCLASS,
    qt_static_metacall,
    nullptr,
    qt_incomplete_metaTypeArray<qt_meta_stringdata_CLASSPieMenuStateENDCLASS_t,
        // property 'Root'
        QtPrivate::TypeAndForceComplete<bool, std::true_type>,
        // property 'MainState'
        QtPrivate::TypeAndForceComplete<bool, std::true_type>,
        // property 'hidden'
        QtPrivate::TypeAndForceComplete<bool, std::true_type>,
        // property 'still'
        QtPrivate::TypeAndForceComplete<bool, std::true_type>,
        // property 'closeBy'
        QtPrivate::TypeAndForceComplete<bool, std::true_type>,
        // property 'selected'
        QtPrivate::TypeAndForceComplete<bool, std::true_type>,
        // property 'subMenu'
        QtPrivate::TypeAndForceComplete<bool, std::true_type>,
        // property 'KeyboardOverride'
        QtPrivate::TypeAndForceComplete<bool, std::true_type>,
        // property 'Inactive'
        QtPrivate::TypeAndForceComplete<bool, std::true_type>,
        // property 'Active'
        QtPrivate::TypeAndForceComplete<bool, std::true_type>,
        // Q_OBJECT / Q_GADGET
        QtPrivate::TypeAndForceComplete<PieMenuState, std::true_type>,
        // method 'RootChanged'
        QtPrivate::TypeAndForceComplete<void, std::false_type>,
        QtPrivate::TypeAndForceComplete<bool, std::false_type>,
        // method 'MainStateChanged'
        QtPrivate::TypeAndForceComplete<void, std::false_type>,
        QtPrivate::TypeAndForceComplete<bool, std::false_type>,
        // method 'hiddenChanged'
        QtPrivate::TypeAndForceComplete<void, std::false_type>,
        QtPrivate::TypeAndForceComplete<bool, std::false_type>,
        // method 'stillChanged'
        QtPrivate::TypeAndForceComplete<void, std::false_type>,
        QtPrivate::TypeAndForceComplete<bool, std::false_type>,
        // method 'closeByChanged'
        QtPrivate::TypeAndForceComplete<void, std::false_type>,
        QtPrivate::TypeAndForceComplete<bool, std::false_type>,
        // method 'selectedChanged'
        QtPrivate::TypeAndForceComplete<void, std::false_type>,
        QtPrivate::TypeAndForceComplete<bool, std::false_type>,
        // method 'subMenuChanged'
        QtPrivate::TypeAndForceComplete<void, std::false_type>,
        QtPrivate::TypeAndForceComplete<bool, std::false_type>,
        // method 'KeyboardOverrideChanged'
        QtPrivate::TypeAndForceComplete<void, std::false_type>,
        QtPrivate::TypeAndForceComplete<bool, std::false_type>,
        // method 'InactiveChanged'
        QtPrivate::TypeAndForceComplete<void, std::false_type>,
        QtPrivate::TypeAndForceComplete<bool, std::false_type>,
        // method 'ActiveChanged'
        QtPrivate::TypeAndForceComplete<void, std::false_type>,
        QtPrivate::TypeAndForceComplete<bool, std::false_type>,
        // constructor 'PieMenuState'
        QtPrivate::TypeAndForceComplete<QObject *, std::false_type>
    >,
    nullptr
} };

void PieMenuState::qt_static_metacall(QObject *_o, QMetaObject::Call _c, int _id, void **_a)
{
    if (_c == QMetaObject::CreateInstance) {
        switch (_id) {
        case 0: { PieMenuState *_r = new PieMenuState((*reinterpret_cast<QObject **>(_a[1])));
            if (_a[0]) *reinterpret_cast<QObject**>(_a[0]) = _r; } break;
        default: break;
        }
    } else if (_c == QMetaObject::ConstructInPlace) {
        switch (_id) {
        case 0: { new (_a[0]) PieMenuState((*reinterpret_cast<QObject **>(_a[1]))); } break;
        default: break;
        }
    } else if (_c == QMetaObject::InvokeMetaMethod) {
        auto *_t = static_cast<PieMenuState *>(_o);
        (void)_t;
        switch (_id) {
        case 0: QMetaObject::activate(_o, &staticMetaObject, 0, _a); break;
        case 1: QMetaObject::activate(_o, &staticMetaObject, 1, _a); break;
        case 2: QMetaObject::activate(_o, &staticMetaObject, 2, _a); break;
        case 3: QMetaObject::activate(_o, &staticMetaObject, 3, _a); break;
        case 4: QMetaObject::activate(_o, &staticMetaObject, 4, _a); break;
        case 5: QMetaObject::activate(_o, &staticMetaObject, 5, _a); break;
        case 6: QMetaObject::activate(_o, &staticMetaObject, 6, _a); break;
        case 7: QMetaObject::activate(_o, &staticMetaObject, 7, _a); break;
        case 8: QMetaObject::activate(_o, &staticMetaObject, 8, _a); break;
        case 9: QMetaObject::activate(_o, &staticMetaObject, 9, _a); break;
        default: ;
        }
    } else if (_c == QMetaObject::IndexOfMethod) {
        int *result = reinterpret_cast<int *>(_a[0]);
        (void)result;
    } else if (_c == QMetaObject::ReadProperty) {
        auto *_t = static_cast<PieMenuState *>(_o);
        (void)_t;
        void *_v = _a[0];
        switch (_id) {
        case 0: *reinterpret_cast< bool*>(_v) = _t->isActive(0); break;
        case 1: *reinterpret_cast< bool*>(_v) = _t->isActive(1); break;
        case 2: *reinterpret_cast< bool*>(_v) = _t->isActive(2); break;
        case 3: *reinterpret_cast< bool*>(_v) = _t->isActive(3); break;
        case 4: *reinterpret_cast< bool*>(_v) = _t->isActive(4); break;
        case 5: *reinterpret_cast< bool*>(_v) = _t->isActive(5); break;
        case 6: *reinterpret_cast< bool*>(_v) = _t->isActive(6); break;
        case 7: *reinterpret_cast< bool*>(_v) = _t->isActive(7); break;
        case 8: *reinterpret_cast< bool*>(_v) = _t->isActive(8); break;
        case 9: *reinterpret_cast< bool*>(_v) = _t->isActive(9); break;
        default: break;
        }
    } else if (_c == QMetaObject::WriteProperty) {
    } else if (_c == QMetaObject::ResetProperty) {
    } else if (_c == QMetaObject::BindableProperty) {
    }
}

const QMetaObject *PieMenuState::metaObject() const
{
    return QObject::d_ptr->metaObject ? QObject::d_ptr->dynamicMetaObject() : &staticMetaObject;
}

void *PieMenuState::qt_metacast(const char *_clname)
{
    if (!_clname) return nullptr;
    if (!strcmp(_clname, qt_meta_stringdata_CLASSPieMenuStateENDCLASS.stringdata0))
        return static_cast<void*>(this);
    return QScxmlStateMachine::qt_metacast(_clname);
}

int PieMenuState::qt_metacall(QMetaObject::Call _c, int _id, void **_a)
{
    _id = QScxmlStateMachine::qt_metacall(_c, _id, _a);
    if (_id < 0)
        return _id;
    if (_c == QMetaObject::InvokeMetaMethod) {
        if (_id < 10)
            qt_static_metacall(this, _c, _id, _a);
        _id -= 10;
    } else if (_c == QMetaObject::RegisterMethodArgumentMetaType) {
        if (_id < 10)
            *reinterpret_cast<QMetaType *>(_a[0]) = QMetaType();
        _id -= 10;
    }else if (_c == QMetaObject::ReadProperty || _c == QMetaObject::WriteProperty
            || _c == QMetaObject::ResetProperty || _c == QMetaObject::BindableProperty
            || _c == QMetaObject::RegisterPropertyMetaType) {
        qt_static_metacall(this, _c, _id, _a);
        _id -= 10;
    }
    return _id;
}

